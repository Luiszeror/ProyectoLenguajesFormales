
import tempfile
from music21 import midi, environment
from lexer import Lexer
from parser import Parser, ParserError
from semantic import SemanticAnalyzer, SemanticError
from bombeo import Bombeo
from generator import MusicGenerator
import glob
import os
import streamlit as st

# üîß Configuraci√≥n de LilyPond (debe ir antes de usar music21)
us = environment.UserSettings()
us['lilypondPath'] = r'C:\Users\hack\Downloads\lilypond-2.24.4\bin\lilypond.exe'  # AJUSTA si est√° en otra carpeta

def main():
    st.title("üéº Compilador Musical")

    lexer = Lexer()

    st.header("1. Entrada del c√≥digo fuente")
    metodo = st.radio("Selecciona el m√©todo de entrada:", ["Escribir manualmente", "Subir archivo (.txt)"])
    codigo = ""

    if metodo == "Escribir manualmente":
        codigo = st.text_area("Introduce tu c√≥digo:", height=200)
    else:
        archivo = st.file_uploader("Carga un archivo .txt", type=["txt"])
        if archivo is not None:
            contenido = archivo.read().decode("utf-8")
            st.text_area("Contenido del archivo:", value=contenido, height=200)
            codigo = contenido

    if st.button("Analizar"):
        try:
            # 1. An√°lisis L√©xico
            tokens = lexer.analizar(codigo)
            st.success("‚úÖ An√°lisis l√©xico completado con √©xito")
            st.markdown("### Tokens reconocidos:")
            for token in tokens:
                st.code(str(token), language="text")

            # 2. An√°lisis Sint√°ctico
            parser = Parser(tokens)
            parser.parse()
            st.success("‚úÖ An√°lisis sint√°ctico completado con √©xito")

            # 3. An√°lisis Sem√°ntico
            sem = SemanticAnalyzer(tokens)
            sem.analizar()
            st.success("‚úÖ An√°lisis sem√°ntico completado con √©xito")

            # 4. Lema del Bombeo
            st.markdown("---")
            st.header("üìö Lema del Bombeo (Lenguajes Regulares)")
            st.markdown(
                "El **lema del bombeo** establece que si un lenguaje es regular, "
                "entonces cualquier cadena suficientemente larga en ese lenguaje puede "
                "ser dividida en tres partes `x`, `y`, `z` cumpliendo ciertas condiciones, "
                "de modo que al repetir ('bombear') la parte `y`, la cadena resultante sigue en el lenguaje."
            )

            texto_para_bombeo = codigo.replace(" ", "").replace(";", "").replace("\n", "")
            bomba = Bombeo(texto_para_bombeo, 10)
            resultado = bomba.analizar()

            if isinstance(resultado, dict):
                st.markdown(f"**Divisi√≥n:**  \n`x` = `{resultado['x']}`  \n`y` = `{resultado['y']}`  \n`z` = `{resultado['z']}`")
                st.markdown("**Cadenas bombeadas (x y‚Åø z):**")
                for linea in resultado['ejemplos']:
                    st.code(linea)
                st.info(resultado['conclusion'])
            else:
                st.warning(resultado)

            # 5. Generaci√≥n Musical
            st.markdown("---")
            st.header("üéº Partitura y üîä Audio Generados")

            generator = MusicGenerator(tokens)
            musica_stream = generator.generar()

            with st.expander("üéº Ver partitura (todas las p√°ginas)"):
                try:
                    # Esto genera los PNG (puede devolver solo el primero)
                    first_png_path = musica_stream.write('lily.png')
                    # Busca todos los PNG generados en la carpeta temporal
                    base_name = os.path.splitext(first_png_path)[0]
                    png_files = sorted(glob.glob(f"{base_name}-page*.png"))
                    if not png_files:
                        # Si solo hay uno (sin -pageN), muestra ese
                        png_files = [first_png_path]
                    for png_path in png_files:
                        st.image(png_path, caption=os.path.basename(png_path), use_column_width=True)
                except Exception as e:
                    st.warning("‚ö†Ô∏è No se pudo generar la partitura con LilyPond.")
                    st.code(str(e))

            # Reproducir Audio MIDI
            with st.expander("üîä Escuchar audio"):
                try:
                    mf = midi.translate.streamToMidiFile(musica_stream)

                    with tempfile.NamedTemporaryFile(delete=False, suffix=".mid") as tmp:
                        mf.open(tmp.name, 'wb')
                        mf.write()
                        mf.close()

                        with open(tmp.name, "rb") as f:
                            st.audio(f.read(), format="audio/midi")
                except Exception as e:
                    st.warning("‚ö†Ô∏è No se pudo generar el audio.")
                    st.code(str(e))

        except (ValueError, ParserError, SemanticError) as e:
            st.error("‚ùå Error detectado:")
            st.code(str(e), language="text")

if __name__ == "__main__":
    main()
